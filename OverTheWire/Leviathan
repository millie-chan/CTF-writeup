# Leviathan Level 0 → Level 1
ssh leviathan0@leviathan.labs.overthewire.org -p 2223
ls -al /etc/leviathan_pass
found that only the user of that level can access that file
as mentioned in task, check home directory
ls -al /home
you will find that every one could read and access(the x permission of direcory) leviathan* folder, let's access to level 0 first
ls -al /home/leviathan0
ls -al /home/leviathan0/.backup
cat /home/leviathan0/.backup/bookmarks.html
it's a large file, let's use grep
cat /home/leviathan0/.backup/bookmarks.html | grep leviathan1
the password for leviathan1 is PPIfmI1qsA

# Leviathan Level 1 → Level 2
ssh leviathan1@leviathan.labs.overthewire.org -p 2223
ls -al /home/leviathan1
there is a s in permission, go to google, it means we can use leviathan1 to run this program as if we were leviathan2
  looks like we will need it to check the password in /etc/leviathan_pass/leviathan2
cat /home/leviathan1/check
it is a binary file, try grep first, nothing
be brave to run it
/home/leviathan1/check
it shows "password:", then try leviathan1 password first
then it returns "Wrong password, Good Bye ...", looks like it read the content of /etc/leviathan_pass/leviathan2
tried a long input, didnt work, so seems not related to buffer overflow
gave up and go to google https://mayadevbe.me/posts/overthewire/leviathan/level2/
there is a command called ltrace, which can show the call to shared library
then we run ltrace /home/leviathan1/check
after we type something such as test, we can see there is a line: strcmp("tes", "sex") 
tes is the first three chars of test, let's try enter "bun" and then we get strcmp("bun", "sex") 
finally we know the "password" is sex, after entering "sex", it returns a shell
run whoami, confirm that we are leviathan2 now
then cat /etc/leviathan_pass/leviathan2, got mEh5PNl10e
---
wait, if ltrace works, which means other reverse engineering tools should work too, let's try another one
first, download the check file to local
scp -P 2223 leviathan1@leviathan.labs.overthewire.org:/home/leviathan1/check .
hardly have any experience on reverse engineering, let's follow https://null-byte.wonderhowto.com/how-to/reverse-engineering-with-radare2-a-quick-introduction-0165996/
r2 check
aa
pdf @ sym.main
not familiar with assembly, but before strcmp, we can see two variables, var_20h and var_24h
we look into those "mov", var_20h is 'sex', get char put into var_24h and then var_23h then finally var_22h
address from 8845dc to 88845de is the word, then goes to an end (mov byte [var_21h], 0)
seems ltrace is more newbie-friendly XD

# Leviathan Level 2 → Level 3
ssh leviathan2@leviathan.labs.overthewire.org -p 2223
ls -al
  similar to last time, there is a setuid executable
file printfile
  similar to last time
strings printfile
  nothing stands out but this
  *** File Printer ***
  Usage: %s filename
  You cant have that file...
  /bin/cat %s
./printfile
  *** File Printer ***
  Usage: ./printfile filename
ltrace ./printfile /etc/leviathan_pass/leviathan3
  __libc_start_main(0x80491e6, 2, 0xffffd684, 0 <unfinished ...>
  access("/etc/leviathan_pass/leviathan3", 4)                   = -1
  puts("You cant have that file..."You cant have that file...
  )                            = 27
  +++ exited (status 1) +++
  googled access() function, https://www.gnu.org/software/libc/manual/html_node/Testing-File-Access.html
  This function uses the real user and group IDs of the calling process, rather than the effective IDs, to check for access permission. 
  As a result, if you use the function from a setuid or setgid program (see How an Application Can Change Persona), 
  it gives information relative to the user who actually ran the program.
ltrace ./printfile /etc/leviathan_pass/leviathan2
  __libc_start_main(0x80491e6, 2, 0xffffd684, 0 <unfinished ...>
  access("/etc/leviathan_pass/leviathan2", 4)                   = 0
  snprintf("/bin/cat /etc/leviathan_pass/lev"..., 511, "/bin/cat %s", "/etc/leviathan_pass/leviathan2") = 39
  geteuid()                                                     = 12002
  geteuid()                                                     = 12002
  setreuid(12002, 12002)                                        = 0
  system("/bin/cat /etc/leviathan_pass/lev"...mEh5PNl10e
   <no return ...>
  --- SIGCHLD (Child exited) ---
  <... system resumed> )                                        = 0
  +++ exited (status 0) +++
  there are two things looks helpful, firstly we can see the system command, secondly we can see the password of leviathan2
./printfile /etc/leviathan_pass/leviathan2
  You cant have that file...
  but when we run without ltrace, it shows permission denied
  it seems that the access checking use the real runner(leviathan2), but the system command use the file owner(leviathan3)
