Quest:
PDV KLRBC IOEXQ AEY TLGMF EJVO PDV NSWH ZEU.
PDRF PVYP RF S MSQUOSG, XDRBD GVSQF PDSP RP BEQPSRQF SNN 26 NVPPVOF EA PDV VQUNRFD SNMDSIVP. PDRF GSCVF RP RZVSN AEO AOVKLVQBH SQSNHFRF, SF PDV BOHMPSQSNHFP BSQ BEGMSOV PDV AOVKLVQBH EA NVPPVOF RQ PDV BRMDVOPVYP PE PDV CQEXQ AOVKLVQBH EA NVPPVOF RQ PDV VQUNRFD NSQULSUV.

AEO VYSGMNV, PDV GEFP BEGGEQ NVPPVO RQ PDV VQUNRFD NSQULSUV RF V. RA PDV GEFP BEGGEQ NVPPVO RQ PDV BRMDVOPVYP RF Y, PDVQ PDV BOHMPSQSNHFP BSQ SFFLGV PDSP Y RF NRCVNH PE IV S FLIFPRPLPREQ AEO V.

EPDVO BEGGEQ NVPPVOF RQ PDV VQUNRFD NSQULSUV RQBNLZV P, S, E, R, Q, F, SQZ D. PDV BOHMPSQSNHFP BSQ LFV PDRF RQAEOGSPREQ PE GSCV VZLBSPVZ ULVFFVF SIELP PDV EPDVO FLIFPRPLPREQF RQ PDV BRMDVOPVYP.

ANSU{QEX_RJV_NVSOQVZ_GH_SIBF}

Analyze:
ANSU -> FLAG
and then SNN becomes ALL
then looks like NVPPVOF would be LETTERS
keep guessing until all 26 letters mappings are found

Solution:
python code as below, not showing all mappings
-----------------------------------------------------------------------
original="""PDV KLRBC IOEXQ AEY TLGMF EJVO PDV NSWH ZEU.
PDRF PVYP RF S MSQUOSG, XDRBD GVSQF PDSP RP BEQPSRQF SNN 26 NVPPVOF EA PDV VQUNRFD SNMDSIVP. PDRF GSCVF RP RZVSN AEO AOVKLVQBH SQSNHFRF, SF PDV BOHMPSQSNHFP BSQ BEGMSOV PDV AOVKLVQBH EA NVPPVOF RQ PDV BRMDVOPVYP PE PDV CQEXQ AOVKLVQBH EA NVPPVOF RQ PDV VQUNRFD NSQULSUV.

AEO VYSGMNV, PDV GEFP BEGGEQ NVPPVO RQ PDV VQUNRFD NSQULSUV RF V. RA PDV GEFP BEGGEQ NVPPVO RQ PDV BRMDVOPVYP RF Y, PDVQ PDV BOHMPSQSNHFP BSQ SFFLGV PDSP Y RF NRCVNH PE IV S FLIFPRPLPREQ AEO V.

EPDVO BEGGEQ NVPPVOF RQ PDV VQUNRFD NSQULSUV RQBNLZV P, S, E, R, Q, F, SQZ D. PDV BOHMPSQSNHFP BSQ LFV PDRF RQAEOGSPREQ PE GSCV VZLBSPVZ ULVFFVF SIELP PDV EPDVO FLIFPRPLPREQF RQ PDV BRMDVOPVYP.

ANSU{QEX_RJV_NVSOQVZ_GH_SIBF}"""

charDict={
    "A": "F",
    "B": "C",
    "C": "K",
    "D": "H",
    "E": "O",
    "F": "S",
    "G": "M",
    "H": "Y",
    "I": "B",
    "J": "V",
    "K": "Q",
    "L": "U",
    "M": "P",
    "N": "L",
    "O": "R",
    "P": "T",
    "Q": "N",
    "R": "I",
    "S": "A",
    "T": "J",
    "U": "G",
    "V": "E",
    "W": "Z",
    "X": "W",
    "Y": "X",
    "Z": "D"
}
result=""

for i in range(len(original)):
    if charDict.get(original[i]):
        result+=charDict.get(original[i])
    else:
        result+=original[i]

print(result)

-----------------------------
THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.
THIS TEXT IS A PANGRAM, WHICH MEANS THAT IT CONTAINS ALL 26 LETTERS OF THE ENGLISH ALPHABET. THIS MAKES IT IDEAL FOR FREQUENCY ANALYSIS, AS THE CRYPTANALYST CAN COMPARE THE FREQUENCY OF LETTERS IN THE CIPHERTEXT TO THE KNOWN FREQUENCY OF LETTERS IN THE ENGLISH LANGUAGE.

FOR EXAMPLE, THE MOST COMMON LETTER IN THE ENGLISH LANGUAGE IS E. IF THE MOST COMMON LETTER IN THE CIPHERTEXT IS X, THEN THE CRYPTANALYST CAN ASSUME THAT X IS LIKELY TO BE A SUBSTITUTION FOR E.

OTHER COMMON LETTERS IN THE ENGLISH LANGUAGE INCLUDE T, A, O, I, N, S, AND H. THE CRYPTANALYST CAN USE THIS INFORMATION TO MAKE EDUCATED GUESSES ABOUT THE OTHER SUBSTITUTIONS IN THE CIPHERTEXT.

FLAG{NOW_IVE_LEARNED_MY_ABCS}
